#定义LOG输出级别 DEBUG < INFO < WARN < ERROR < FATAL
log4j.rootLogger=INFO,Console
#定义日志输出目的地为控制台
log4j.appender.Console=org.apache.log4j.ConsoleAppender
#默认值是System.out
log4j.appender.Console.Target=System.out
#指定日志信息的最低输出级别，默认为DEBUG
log4j.appender.Console.Threshold=DEBUG
#可以灵活地指定日志输出格式，下面一行是指定具体的格式
#%p：输出日志信息的优先级，即DEBUG，INFO，WARN，ERROR，FATAL。
#%d：输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，如：%d{yyyy/MM/dd HH:mm:ss,SSS}。
#%r：输出自应用程序启动到输出该log信息耗费的毫秒数。
#%t：输出产生该日志事件的线程名。
#%l：输出日志事件的发生位置，相当于%c.%M(%F:%L)的组合，包括类全名、方法、文件名以及在代码中的行数。例如：test.TestLog4j.main(TestLog4j.java:10)。
#%c：输出日志信息所属的类目，通常就是所在类的全名。
#%M：输出产生日志信息的方法名。
#%F：输出日志消息产生时所在的文件名称。
#%L：输出代码中的行号。
#%m：*输出代码中指定的具体日志信息。
#%n：*输出一个回车换行符，Windows平台为"rn"，Unix平台为"n"。
#%x：输出和当前线程相关联的NDC(嵌套诊断环境)，尤其用到像java servlets这样的多客户多线程的应用中。
#%%：输出一个"%"字符。
#"-"号表示左对齐。
log4j.appender.Console.layout = org.apache.log4j.PatternLayout
log4j.appender.Console.layout.ConversionPattern=%-4r [%-5p] %c.%x%M(%F:%L)  - %m%n
#%-4r [%t] %-5p %c %x - %m%n || [%c] - %m%n

#mybatis显示SQL语句日志配置
#log4j.logger.org.mybatis=DEBUG
##log4j.logger.org.apache=INFO
log4j.logger.com.wzj.hengmei.mapper=DEBUG
#log4j.logger.com.ibatis.common.jdbc.SimpleDataSource=DEBUG
#log4j.logger.com.ibatis.common.jdbc.ScriptRunner=DEBUG
#log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=DEBUG
#log4j.logger.java.sql.ResultSet=INFO
#log4j.logger.java.sql.Connection=DEBUG
#log4j.logger.java.sql.Statement=DEBUG
#log4j.logger.java.sql.PreparedStatement=DEBUG

